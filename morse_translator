from abc import *
class Morse_Language(ABC):
    MORSE_CODE_DICT = {'A': '.-', 'B': '-...',
                       'C': '-.-.', 'D': '-..', 'E': '.',
                       'F': '..-.', 'G': '--.', 'H': '....',
                       'I': '..', 'J': '.---', 'K': '-.-',
                       'L': '.-..', 'M': '--', 'N': '-.',
                       'O': '---', 'P': '.--.', 'Q': '--.-',
                       'R': '.-.', 'S': '...', 'T': '-',
                       'U': '..-', 'V': '...-', 'W': '.--',
                       'X': '-..-', 'Y': '-.--', 'Z': '--..',
                       '1': '.----', '2': '..---', '3': '...--',
                       '4': '....-', '5': '.....', '6': '-....',
                       '7': '--...', '8': '---..', '9': '----.',
                       '0': '-----', ', ': '--..--', '.': '.-.-.-',
                       '?': '..--..', '/': '-..-.', '-': '-....-',
                       '(': '-.--.', ')': '-.--.-'}


class encoder_decoder(Morse_Language):

    def encode(self, message):
        morsed_letter = ''
        for letter in message:
            if letter != ' ':
                morsed_letter += self.MORSE_CODE_DICT[letter] + ' '
        else:
            morsed_letter += ' '

        return morsed_letter


    def decode(self, message):

        message += ' '

        demorsed_letter = ''
        englished = ''
        for letter in message:
            if (letter != ' '):

                x = 0
                englished += letter

            else:
                x += 1

                if x == 2:

                    # adding space to separate words
                    demorsed_letter += ' '
                else:

                    # accessing the keys using their values (reverse of encoding)
                    demorsed_letter += list(self.MORSE_CODE_DICT.keys())[list(self.MORSE_CODE_DICT
                                                                              .values()).index(englished)]
                    englished = ''

        return demorsed_letter

        # Hard-coded driver function to run the program


class Handler(encoder_decoder):
    english = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
               'v', 'w',
               'x', 'y', 'z']
    upper_english = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
                     "U", "V", "W", "X", "Y", "Z"]

    def Handel_massege(self, message):
        if message[0] in self.english or message[0] in self.upper_english:
            return encoder_decoder.encode(self, message)
        else:
            return encoder_decoder.decode(self, message)


Handel = Handler()
while True:
    print("Hello User :")
    user_input = input("1:Decode  OR encode\n2:exit\n Your decision: ")
    if user_input == "1":
        messagee = input("Enter Your Message: \n")
        message = messagee.upper()
        result  = Handel.Handel_massege(message)
        result = result
        print("Output is : {"+ result +"}\n")
    else:
        break

